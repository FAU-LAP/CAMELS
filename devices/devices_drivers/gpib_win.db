record(ai, "$(P)$(R)K2000")
{
    field (DESC, "Read value of K2000")
    field (DTYP, "stream")
    field (INP,  "@devSCPI.proto getValue $(PORT) $(A)")
    field (PREC, "2")
    field (LOPR, "0")
    field (HOPR, "60")
    field (PINI, "YES")
    field (SCAN, "Passive")
    field (TPRO, "1")
}


record(ao, "$(P)$(R)SMU:C1:Vout")
{
	field (DESC, "voltage output for channel 1 SMU")
	field (DTYP, "stream")
	field (OUT, "@devSCPI.proto putValue(:SOUR1:VOLT) $(PORT) $(B)")
	field (FLNK, "$(P)$(R)SMU:_setReadbackScan")
	field (EGU, "V")
	field (DRVH, "1.0")
	field (DRVL, "-1") #invalid setzen bei zu hoher spannung
}

record(ao, "$(P)$(R)SMU:C1:Cout")
{
	field (DESC, "current output for channel 1 SMU")
	field (DTYP, "stream")
	field (OUT, "@devSCPI.proto putValue(:SOUR1:CURR) $(PORT) $(B)")
	field (FLNK, "$(P)$(R)SMU:C1:in.PROC")
	field (EGU, "V")
}

record(longout, "$(P)$(R)SMU:_setReadbackScan")
{
	field(DESC, "set scan of readback channel1 to .1")
	field(TPRO, "1")
	field(VAL, "9")
	field(OUT, "$(P)$(R)SMU:C1:Vin.SCAN CPP NMS")
	
}
record(calc, "$(P)$(R)SMU:C1:Vout_done") 
{
	field(DESC,"sets the done flag for Vout")
	field(INPA, "$(P)$(R)SMU:C1:Vin.SCAN CPP")
	field(CALC, "!A")
}

record(ao,"$(P)$(R)SMU:Vout_ext")
{
	field(DESC, "external val Vout read by software")
	field(EGU, "V")
	field(TSEL, "$(P)$(R)SMU:Cin_ext.TIME")
	field(PREC, "5")
}

record(ai,"$(P)$(R)SMU:Cin_ext")
{
	field(DESC, "external value Cin read by software")
	field(EGU, "A")
	field(PREC, "5")
}

record(calcout, "$(P)$(R)SMU:_readbackComparison")
{
	field(DESC, "compares set Vout with measured Vin")
	field(INPA, "$(P)$(R)SMU:C1:Vout NPP")
	field(INPB, "$(P)$(R)SMU:C1:Vin CPP")
	field(CALC, "ABS(A-B) < 0.1")
	field(OOPT, "When Non-zero")
	field(DOPT, "Use OCAL")
	field(OCAL, "0")
	field(TPRO, "1")
	field(OUT, "$(P)$(R)SMU:C1:Vin.SCAN CPP NMS")
	field(FLNK, "$(P)$(R)SMU:C1:Cin.PROC")
	
}	


record(ao, "$(P)$(R)SMU:C2:Cout")
{
	field (DESC, "current output for channel 2 SMU")
	field (DTYP, "stream")
	field (OUT, "@devSCPI.proto putValue(:SOUR2:CURR) $(PORT) $(B)")
	field (FLNK, "$(P)$(R)SMU:C2:in.PROC")
	field (EGU, "A")
}

record(ao, "$(P)$(R)SMU:C2:Vout")
{
	field (DESC, "voltage output for channel 2 SMU")
	field (DTYP, "stream")
	field (OUT, "@devSCPI.proto putValue(:SOUR2:VOLT) $(PORT) $(B)")
	field (FLNK, "$(P)$(R)SMU:C2:in")
	field (EGU, "A")
}

record(ai, "$(P)$(R)SMU:C1:Cin")
{
    field (DESC, "Current read value of SMU")
    field (DTYP, "stream")
    field (INP,  "@devSCPI.proto getC1Curr $(PORT) $(B)")
    field (PREC, "2")
    field (LOPR, "0")
    field (HOPR, "60")
    field (PINI, "YES")
    field (SCAN, "Passive")
	field(FLNK, "$(P)$(R)SMU:Seq.PROC")
}

record(seq, "$(P)$(R)SMU:Seq") 
{
	field(DOL1, "$(P)$(R)SMU:C1:Vin")
	field(LNK1, "$(P)$(R)SMU:Vout_ext PP")
	field(DOL0, "$(P)$(R)SMU:C1:Cin")
	field(LNK0, "$(P)$(R)SMU:Cin_ext PP")
	field(SELM, "Mask")
	field(SELN, "3")
	field(SHFT, "0")
	field(TPRO, "1")
}
record(ai, "$(P)$(R)SMU:C1:Vin")
{
    field (DESC, "Read value of SMU")
    field (DTYP, "stream")
    field (INP,  "@devSCPI.proto getC1Volt $(PORT) $(B)")
    field (PREC, "2")
    field (LOPR, "0")
    field (HOPR, "60")
    field (SCAN, "Passive")
}

record(bo, "$(P)$(R)SMU:C1:CurrMode")
{
	field(DESC, "Set Source mode to Current")
    field (DTYP, "stream")
	field (OUT, "@devSCPI.proto cmd(:SOUR:FUNC:MODE CURR) $(PORT) $(B)")
}

record(bo, "$(P)$(R)SMU:C1:VoltMode")
{
	field(DESC, "Set Source mode to Voltage")
    field (DTYP, "stream")
	field (OUT, "@devSCPI.proto cmd(:SOUR:FUNC:MODE VOLT) $(PORT) $(B)")
}

record(bo, "$(P)$(R)SMU:C2:CurrMode")
{
	field(DESC, "Set Source mode to Current")
    field (DTYP, "stream")
	field (OUT, "@devSCPI.proto cmd(:SOUR2:FUNC:MODE CURR) $(PORT) $(B)")
}

record(bo, "$(P)$(R)SMU:C2:VoltMode")
{
	field(DESC, "Set Source mode to Voltage")
    field (DTYP, "stream")
	field (OUT, "@devSCPI.proto cmd(:SOUR2:FUNC:MODE VOLT) $(PORT) $(B)")
}

record(stringin, "$(P)$(R)IDN")
{
    field(DESC, "SCPI identification string")
    field(DTYP, "stream")
    field(INP,  "@devSCPI.proto getIDN(39) $(PORT) $(A)")
    field(PINI, "YES")
}

record(stringin, "$(P)$(R)IDNB")
{
    field(DESC, "SCPI identification string")
    field(DTYP, "stream")
    field(INP,  "@devSCPI.proto getIDN(39) $(PORT) $(B)")
    field(PINI, "YES")
}

